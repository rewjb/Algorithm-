аж╪р : https://www.hackerrank.com/challenges/migratory-birds/submissions/code/109411253
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

public class Solution {

    // Complete the migratoryBirds function below.
    static int migratoryBirds(List<Integer> arr) {

        
        int result[] = {-1 , 1};

        Map<Integer,Integer> score = new HashMap<>( );

        int size = arr.size();

        int tempKey;

        int value;

        Set<Integer> setKeys = new HashSet<>();

        for (int i = 0; i < size; i++) {
            setKeys.add(arr.get(i));
        }

        Object keys[] =  setKeys.toArray();

        for (int i = 0; i < size; i++) {
            tempKey = arr.get(i);
            if (score.containsKey(tempKey)){
                score.put(tempKey , score.get(tempKey) + 1 );
                continue;
            }
            score.put(tempKey , 1);
        }
        size = keys.length;

        for (int i = 0; i < size; i++) {
            if ( (value = score.get( (Integer) keys[i] )) > result[1] ) {
                result[0] = (Integer) keys[i];
                result[1] = value;
            }
        }

        for (int i = 0; i < size; i++) {
            if ( (score.get( (Integer) keys[i] )) == result[1] &&  (Integer) keys[i] < result[0]) {
                result[0] = (Integer) keys[i];
            }
        }

        System.out.println(result[0]);
        System.out.println(result[1]);


        return result[0];


    }

    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int arrCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = migratoryBirds(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
